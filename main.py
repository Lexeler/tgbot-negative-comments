import os
import re
import time
import threading
import datetime
import logging
from typing import List, Dict, Any

import requests
from bs4 import BeautifulSoup
import matplotlib.pyplot as plt
import telebot
from telebot import types
from transformers import pipeline

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ó–∞–≥—Ä—É–∑–∫–∞ API-—Ç–æ–∫–µ–Ω–∞ –¥–ª—è Telegram –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TELEGRAM_TOKEN = 'YOUR_API_TELEGRAM_TOKEN'

# –°–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤-—ç–º–æ—Ü–∏–π (–≤–∫–ª—é—á–∞—è "—Å–∞—Ä–∫–∞–∑–º")
CANDIDATE_LABELS = ["–∞–≥—Ä–µ—Å—Å–∏—è", "—Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å", "—Å–∞—Ä–∫–∞–∑–º", "–ø–æ–∑–∏—Ç–∏–≤", "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è zero-shot –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
classifier = pipeline("zero-shot-classification", model="joeddav/xlm-roberta-large-xnli")

BASE_URL = "https://lenta.ru"
# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ chat_id
user_context: Dict[int, List[Dict[str, Any]]] = {}


def format_news_headline(headline: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏, –≤—ã–¥–µ–ª—è—è –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É, –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç.
    """
    pattern = r"^(.*?)(\d{2}:\d{2}),\s*([\d]{1,2}\s+\S+\s+\d{4})(.*)$"
    match = re.match(pattern, headline)
    if match:
        main_text = match.group(1).strip()
        time_str = match.group(2)
        date_str = match.group(3)
        return f"{main_text}, {time_str}, {date_str}"
    return headline


def get_first_sentence(url: str) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É URL.
    """
    try:
        response = requests.get(url)
        response.encoding = "utf-8"
        html = response.text
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏ {url}: {e}")
        return ""

    soup = BeautifulSoup(html, 'html.parser')
    article_body = soup.find('div', class_='topic-body__content')
    text = ""
    if article_body:
        p = article_body.find('p')
        if p:
            text = p.get_text(strip=True)
    if not text:
        p = soup.find('p')
        if p:
            text = p.get_text(strip=True)
    sentences = re.split(r'(?<=[.!?])\s+', text)
    return sentences[0] if sentences else ""


def get_news_for_day(date_obj: datetime.date) -> List[Dict[str, Any]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å.
    """
    url = f"{BASE_URL}/news/{date_obj.year}/{date_obj.month:02}/{date_obj.day:02}/"
    news_items = []
    try:
        response = requests.get(url)
        response.encoding = "utf-8"
        html = response.text
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ {url}: {e}")
        return []

    soup = BeautifulSoup(html, 'html.parser')
    blacklisted_headlines = {
        "—É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ", "–ø–æ–¥—Ä–æ–±–Ω–µ–µ", "–ø—Ä–µ—Å—Å-—Ä–µ–ª–∏–∑—ã", "—Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "—Å–ø–µ—Ü–ø—Ä–æ–µ–∫—Ç—ã",
        "—É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", "–ø–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", "–ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π",
        "—É—Å–ª–æ–≤–∏—è–º–∏ –∞–∫—Ü–∏–∏ lenta.ru", "–ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ rambler id", "–±—ã–≤—à–∏–π —Å—Å—Å—Ä",
        "—Å–∏–ª–æ–≤—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã", "–Ω–∞—É–∫–∞ –∏ —Ç–µ—Ö–Ω–∏–∫–∞", "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ –°–ú–ò", "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è",
        "—Å—Ä–µ–¥–∞ –æ–±–∏—Ç–∞–Ω–∏—è", "–∑–∞–±–æ—Ç–∞ –æ —Å–µ–±–µ"
    }
    blacklisted_url_parts = ["mailto:", "/parts/", "/specprojects/", "/info/", "help.rambler.ru", "/rubrics/"]

    for a in soup.find_all('a', href=True):
        raw_headline = a.get_text(strip=True)
        headline = format_news_headline(raw_headline)
        if not headline or len(headline) <= 10 or headline.lower() in blacklisted_headlines:
            continue

        href = a['href']
        if href.startswith('/'):
            full_url = BASE_URL + href
        elif href.startswith('http'):
            full_url = href
        else:
            full_url = BASE_URL + '/' + href

        if any(bad in full_url for bad in blacklisted_url_parts):
            continue

        news_items.append({'headline': headline, 'url': full_url})

    unique_news = {item['url']: item for item in news_items}.values()
    return list(unique_news)


def get_news_for_date_range(start_date: datetime.date, end_date: datetime.date) -> Dict[datetime.date, List[Dict[str, Any]]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á ‚Äì –¥–∞—Ç–∞, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äì —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å.
    """
    news_by_day = {}
    current_date = start_date
    delta = datetime.timedelta(days=1)
    while current_date <= end_date:
        news_by_day[current_date] = get_news_for_day(current_date)
        current_date += delta
    return news_by_day


def generate_emotion_graph(news_items: List[Dict[str, Any]]) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç–º–æ—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ —Ñ–∞–π–ª.
    """
    emotion_counts = {label: 0 for label in CANDIDATE_LABELS}
    for news in news_items:
        emotion = news.get('predicted_emotion')
        if emotion in emotion_counts:
            emotion_counts[emotion] += 1

    plt.figure(figsize=(8, 6))
    plt.bar(emotion_counts.keys(), emotion_counts.values(), color='skyblue')
    plt.xlabel("–≠–º–æ—Ü–∏—è")
    plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π")
    plt.title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–π –Ω–æ–≤–æ—Å—Ç–µ–π")
    filename = "emotion_graph.png"
    plt.savefig(filename)
    plt.close()
    return filename


def format_progress(percent: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞, –∏—Å–ø–æ–ª—å–∑—É—è 10 —ç–º–æ–¥–∑–∏.
    """
    total_blocks = 10
    filled_blocks = int((percent / 100) * total_blocks)
    empty_blocks = total_blocks - filled_blocks
    return "üîµ" * filled_blocks + "‚ö™" * empty_blocks + f" {percent}%"


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ Telegram
bot = telebot.TeleBot(API_TOKEN, parse_mode="HTML")


@bot.message_handler(commands=['start'])
def send_welcome(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    chat_id = message.chat.id
    welcome_text = (
        "<b>–ü—Ä–∏–≤–µ—Ç!</b> üëã\n\n"
        "–Ø ‚Äî –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π —Å —Å–∞–π—Ç–∞ "
        "<a href='https://lenta.ru'>Lenta.ru</a>.\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î-–ú–ú-–ì–ì–ì–ì</b>.\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        "–û–¥–∏–Ω –¥–µ–Ω—å: <code>15-03-2025</code>\n"
        "–î–∏–∞–ø–∞–∑–æ–Ω: <code>01-01-2025 31-01-2025</code>\n\n"
        "–ï—Å–ª–∏ –Ω—É–∂–Ω—ã –ø–æ–¥—Å–∫–∞–∑–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <b>/help</b>."
    )
    bot.send_message(chat_id, welcome_text)


@bot.message_handler(commands=['help'])
def send_help(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞.
    """
    chat_id = message.chat.id
    help_text = (
        "<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:</b>\n\n"
        "1. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î-–ú–ú-–ì–ì–ì–ì</b>.\n"
        "   –ù–∞–ø—Ä–∏–º–µ—Ä, <code>15-03-2025</code> –∏–ª–∏ <code>01-01-2025 31-01-2025</code>.\n\n"
        "2. –ë–æ—Ç —Å–æ–±–µ—Ä—ë—Ç –Ω–æ–≤–æ—Å—Ç–∏ —Å <a href='https://lenta.ru'>Lenta.ru</a> –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Ö —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É.\n\n"
        "3. –í—ã —É–≤–∏–¥–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ —Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —ç–º–æ—Ü–∏–π –∏ —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π.\n\n"
        "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è! üòä"
    )
    bot.send_message(chat_id, help_text)


@bot.message_handler(func=lambda message: True)
def process_date_input(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞—Ç—ã –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç, —Å–æ–±–∏—Ä–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏, –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –∏—Ö —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É,
    –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    chat_id = message.chat.id
    text = message.text.strip()
    parts = text.split()
    aggregated_news: List[Dict[str, Any]] = []

    try:
        if len(parts) == 1:
            day, month, year = map(int, parts[0].split('-'))
            date_obj = datetime.date(year, month, day)
            aggregated_news = get_news_for_day(date_obj)
            bot.send_message(chat_id, f"–ù–∞–π–¥–µ–Ω–æ <b>{len(aggregated_news)}</b> –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ <b>{date_obj}</b>.")
        elif len(parts) == 2:
            day1, month1, year1 = map(int, parts[0].split('-'))
            day2, month2, year2 = map(int, parts[1].split('-'))
            start_date = datetime.date(year1, month1, day1)
            end_date = datetime.date(year2, month2, day2)
            if start_date > end_date:
                start_date, end_date = end_date, start_date
            news_range = get_news_for_date_range(start_date, end_date)
            for date_key, news_list in news_range.items():
                for news in news_list:
                    news['date'] = date_key
                    aggregated_news.append(news)
            bot.send_message(chat_id, f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø–µ—Ä–∏–æ–¥ <b>{start_date}</b> - <b>{end_date}</b>.")
        else:
            bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î-–ú–ú-–ì–ì–ì–ì</b>.")
            return
    except Exception as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞: <b>{e}</b>")
        return

    if not aggregated_news:
        bot.send_message(chat_id, "–ù–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω.")
        return

    progress_msg = bot.send_message(chat_id, "–û—Ü–µ–Ω–∫–∞ —ç–º–æ—Ü–∏–π: " + format_progress(0))
    progress = {"count": 0, "total": len(aggregated_news), "done": False}

    def update_progress() -> None:
        while not progress["done"]:
            percent = int((progress["count"] / progress["total"]) * 100) if progress["total"] > 0 else 100
            try:
                bot.edit_message_text(chat_id=chat_id, message_id=progress_msg.message_id,
                                      text="–û—Ü–µ–Ω–∫–∞ —ç–º–æ—Ü–∏–π: " + format_progress(percent))
            except Exception:
                pass
            time.sleep(0.5)
        try:
            bot.edit_message_text(chat_id=chat_id, message_id=progress_msg.message_id,
                                  text="–û—Ü–µ–Ω–∫–∞ —ç–º–æ—Ü–∏–π: " + format_progress(100))
        except Exception:
            pass

    progress_thread = threading.Thread(target=update_progress)
    progress_thread.start()

    for news in aggregated_news:
        first_sentence = get_first_sentence(news['url'])
        combined_text = news['headline']
        if first_sentence:
            combined_text += ". " + first_sentence
        news['combined_text'] = combined_text
        try:
            result = classifier(combined_text, candidate_labels=CANDIDATE_LABELS)
            news['predicted_emotion'] = result["labels"][0]
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
            news['predicted_emotion'] = "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
        progress["count"] += 1

    progress["done"] = True
    progress_thread.join()

    user_context[chat_id] = aggregated_news

    graph_file = generate_emotion_graph(aggregated_news)
    with open(graph_file, 'rb') as photo:
        bot.send_photo(chat_id, photo, caption="–ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç–º–æ—Ü–∏–π –Ω–æ–≤–æ—Å—Ç–µ–π")

    markup = types.InlineKeyboardMarkup()
    for label in CANDIDATE_LABELS:
        markup.add(types.InlineKeyboardButton(text=label.capitalize(), callback_data=f"emotion_{label}"))
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —ç–º–æ—Ü–∏–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("emotion_"))
def callback_emotion(call: types.CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏.
    """
    chat_id = call.message.chat.id
    selected_emotion = call.data.split("_", 1)[1].lower()
    news_items = user_context.get(chat_id, [])
    filtered_news = [news for news in news_items if news.get('predicted_emotion', '').lower() == selected_emotion]

    if filtered_news:
        response_text = f"<b>–ù–∞–π–¥–µ–Ω–æ {len(filtered_news)} –Ω–æ–≤–æ—Å—Ç–µ–π —Å —ç–º–æ—Ü–∏–µ–π '{selected_emotion}':</b>\n\n"
        for news in filtered_news:
            date_info = f" (<i>{news['date']}</i>)" if "date" in news else ""
            response_text += f"‚Ä¢ {news['headline']}{date_info}\n–°—Å—ã–ª–∫–∞: <a href='{news['url']}'>–ß–∏—Ç–∞—Ç—å</a>\n\n"
    else:
        response_text = f"–ù–æ–≤–æ—Å—Ç–µ–π —Å —ç–º–æ—Ü–∏–µ–π '{selected_emotion}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    bot.send_message(chat_id, response_text)


def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    bot.polling(none_stop=True)


if __name__ == "__main__":
    main()
